pico-8 cartridge // http://www.pico-8.com
version 38
__lua__

-- Puzzle 10
-- by Tipa

function _init()
 -- initialize the game
 cross = {
    center={64, 64},
    polys={
        {-48, -16, 48, -16, 48, 16, -48, 16},
        {-16, -48, 16, -48, 16, -12, -16, -12}
    }
 }
 player = { pos = {0, 0}, size = { 24, 32 }, velocity = {0, 0}, flap_power=0.5, drag=0.1, max_velocity=3, gravity=0.3 }
 square_angle = 0
end

function _update()
 -- update the game
    square_angle += 0.005

    player.pos[1] = min(max(player.pos[1] + player.velocity[1], (player.size[1]-128)/2), (128-player.size[1])/2)
    player.pos[2] = min(max(player.pos[2] + player.velocity[2], player.size[2]-128), 0)

 -- if left arrow
    if btn(⬅️) then
        player.velocity[1] = max(player.velocity[1] - player.flap_power, -player.max_velocity)
    end
    if btn(➡️) then
        player.velocity[1] = min(player.velocity[1] + player.flap_power, player.max_velocity)
	end
    if btn(⬆️) then
        player.velocity[2] = max(player.velocity[2] - player.flap_power, -player.max_velocity)
    end
    if btn(⬇️) then
    	player.velocity[2] = min(player.velocity[2] + player.flap_power, player.max_velocity)
	end

    player.velocity[2] = min(player.velocity[2] + player.gravity, player.max_velocity)

    if not btn(⬅️) and not btn(➡️) then
        player.velocity[1] = player.velocity[1] * (1 - player.drag)
    end
    if not btn(⬆️) and not btn(⬇️) then
        player.velocity[2] = player.velocity[2] * (1 - player.drag)
    end
end

function _draw()
 -- draw the game
 cls(11)

 -- square is a table of vertices. rotate it by square_angle and assign it to a new table, then render it
 cross.center[1] = 66 + sin(square_angle) * 32
 cross.center[2] = 66
 spr(8, (128-player.size[1])/2 + player.pos[1]+2, 128-player.size[2] + player.pos[2]+2, 4, 4)

 rotate_and_draw(cross, square_angle, 3)


 -- fill screen with 32x32 sprite at position 0
for y=0,3 do
    for x=0,3 do
    spr(0, x*32, y*32, 4, 4)
    end
end

 cross.center[1] = 64 + sin(square_angle) * 32
 cross.center[2] = 64
 rotate_and_draw(cross, square_angle, 8)

 spr(4, (128-player.size[1])/2 + player.pos[1], 128-player.size[2] + player.pos[2], 4, 4)

end

-- rotate a table of vertices
-- by an angle in radians
function rotate_and_draw(shape, angle, color)
    for i = 1, #shape.polys do
        local v = shape.polys[i]
        local newv={}

        for i=1, #v/2 do
            local x=v[i*2-1]
            local y=v[i*2]

            local nx=x*cos(angle)-y*sin(angle)
            local ny=x*sin(angle)+y*cos(angle)

            add(newv,nx + shape.center[1])
            add(newv,ny + shape.center[2])
        end

        render_poly(newv, color)
    end
end

-- draws a filled convex polygon
-- v is an array of vertices
-- {x1, y1, x2, y2} etc
function render_poly(v, col)
 col=col or 5

 -- initialize scan extents
 -- with ludicrous values
 local x1,x2={},{}
 for y=0,127 do
  x1[y],x2[y]=128,-1
 end
 local y1,y2=128,-1

 -- scan convert each pair
 -- of vertices
 for i=1, #v/2 do
  local next=i+1
  if (next>#v/2) next=1

  -- alias verts from array
  local vx1=flr(v[i*2-1])
  local vy1=flr(v[i*2])
  local vx2=flr(v[next*2-1])
  local vy2=flr(v[next*2])

  if vy1>vy2 then
   -- swap verts
   local tempx,tempy=vx1,vy1
   vx1,vy1=vx2,vy2
   vx2,vy2=tempx,tempy
  end 

  -- skip horizontal edges and
  -- offscreen polys
  if vy1~=vy2 and vy1<128 and
   vy2>=0 then

   -- clip edge to screen bounds
   if vy1<0 then
    vx1=(0-vy1)*(vx2-vx1)/(vy2-vy1)+vx1
    vy1=0
   end
   if vy2>127 then
    vx2=(127-vy1)*(vx2-vx1)/(vy2-vy1)+vx1
    vy2=127
   end

   -- iterate horizontal scans
   for y=vy1,vy2 do
    if (y<y1) y1=y
    if (y>y2) y2=y

    -- calculate the x coord for
    -- this y coord using math!
    x=(y-vy1)*(vx2-vx1)/(vy2-vy1)+vx1

    if (x<x1[y]) x1[y]=x
    if (x>x2[y]) x2[y]=x
   end 
  end
 end

 -- render scans
 for y=y1,y2 do
  local sx1=flr(max(0,x1[y]))
  local sx2=flr(min(127,x2[y]))

  local c=col*16+col
  local ofs1=flr((sx1+1)/2)
  local ofs2=flr((sx2+1)/2)
  memset(0x6000+(y*64)+ofs1,c,ofs2-ofs1)
  pset(sx1,y,c)
  pset(sx2,y,c)
 end 
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000a00000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000003a000000000000000000000900000000000000000000000000000003000000000000000000000000000000000000000000000000000
00a0000000000000000000a000000000000000000009990000000000000000000000000000033300000000000000000000000000000000000000000000000000
a0aa0a000000000a000000a000000000000000000001910000000000000000000000000000033300000000000000000000000000000000000000000000000000
a0aaaa000000000a000000300000000000000000001c1c1000000000000000000000000000333330000000000000000000000000000000000000000000000000
aaa3a300000000030000000000000000000000000011811000000000000000000000000000333330000000000000000000000000000000000000000000000000
3aa3a000000000000000000000000000000000000014841000000000000000000000000000333330000000000000000000000000000000000000000000000000
03333000000000000000000000000000000000000004840000000000000000000000000000033300000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000014841000000000000000000000000000333330000000000000000000000000000000000000000000000000
0000000000a00000000000000000000000000000001d8d1000000000000000000000000000333330000000000000000000000000000000000000000000000000
0000000000000000000000000000a0000000010001ddddd100010000000000000000030003333333000300000000000000000000000000000000000000000000
00000000000000000000000000000000000015111ddddddd11151000000000000000333333333333333330000000000000000000000000000000000000000000
0000000000000000000000000000000000015ddddd4ddd4ddddd5100000000000003333333333333333333000000000000000000000000000000000000000000
000000000000000000000000000000000001ddddddddddddddddd100000000000003333333333333333333000000000000000000000000000000000000000000
000000000000a0000000000000000000001dddddd2ddddd2dddddd10000000000033333333333333333333300000000000000000000000000000000000000000
00000000000a3000000000000000000001ddddddd2ddddd2ddddddd1000000000333333333333333333333330000000000000000000000000000000000000000
00000000000a000000000000000000001dddddddd1ddddd1dddddddd100000003333333333333333333333333000000000000000000000000000000000000000
000000000a0a0000000aa000000000001ddddddd11ddddd11ddddddd100000003333333333333333333333333000000000000000000000000000000000000000
0000000000030000000aa000000000001dddd111d1ddddd1d111dddd100000003333333333333333333333333000000000000000000000000000000000000000
0000000000000000000000000000000018d11ddd1d1ddd1d1ddd11d8100000003333333333333333333333333000000000000000000000000000000000000000
00000000000000000000000000000000188dd111011ddd110111dd88100000003333333303333333033333333000000000000000000000000000000000000000
000000000000000000000a000000000051111000001ddd1000001111500000003333300000333330000033333000000000000000000000000000000000000000
0000a0000000000000000a00a000000000000000001ddd1000000000000000000000000000333330000000000000000000000000000000000000000000000000
000000000000000000000a0a300000000000000001ddddd100000000000000000000000003333333000000000000000000000000000000000000000000000000
000000000000000000000a0a00000000000000001ddd1ddd10000000000000000000000033333333300000000000000000000000000000000000000000000000
00000000000000000000030300000000000000001d1ddd1d10000000000000000000000033333333300000000000000000000000000000000000000000000000
000000000a00a00000000000000000000000000001dd1dd100000000000000000000000003333333000000000000000000000000000000000000000000000000
0000000003a0a0000000000000000000000000000011111000000000000000000000000000333330000000000000000000000000000000000000000000000000
0000000000a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000003030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
